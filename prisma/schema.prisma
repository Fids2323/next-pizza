generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Cart   Cart[]
  orders Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId Int
  ingredient Ingredient[]
  items      ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id        Int  @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?

  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id          Int    @id @default(autoincrement())
  totalAmount Int
  token       String

  user   User?      @relation(fields: [userId], references: [id])
  userId Int?
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  ingredients   Ingredient[]

  quanity   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  address     String
  email       String
  phone       String
  comment     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}
